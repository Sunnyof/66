plugins {
    id 'com.android.application'
    id 'stringfog'
    id 'android-junk-code'
    id 'xml-class-guard'
    id 'top.niunaijun.blackobfuscator'
//    id 'com.bytedance.android.aabResGuard'
}
//aabResGuard {
//    mappingFile = file("mapping.txt").toPath() // 用于增量混淆的 mapping 文件
//    whiteList = [ // 白名单规则
//                  "*.R.raw.*",
//                  "*.R.drawable.icon"
//    ]
//    obfuscatedBundleFileName = "duplicated-app.aab" // 混淆后的文件名称，必须以 `.aab` 结尾
//    mergeDuplicatedRes = true // 是否允许去除重复资源
//    enableFilterFiles = true // 是否允许过滤文件
//    filterList = [ // 文件过滤规则
//                   "*/arm64-v8a/*",
//                   "META-INF/*"
//    ]
//    enableFilterStrings = false // 过滤文案
//    unusedStringPath = file("unused.txt").toPath() // 过滤文案列表路径 默认在mapping同目录查找
//    languageWhiteList = ["en", "zh"] // 保留en,en-xx,zh,zh-xx等语言，其余均删除
//}

//import cn.hx.plugin.junkcode.plugin.LifecycleClassVisitor
import com.github.megatronking.stringfog.plugin.kg.HardCodeKeyGenerator
import com.github.megatronking.stringfog.plugin.StringFogMode
import com.github.megatronking.stringfog.xor.*;

stringfog {
    // 必要：加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 可选：加密开关，默认开启。
    enable true
    // 可选：指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = ['org.tank','com.cocos']
    // 可选（3.0版本新增）：指定密钥生成器，默认使用长度8的随机密钥（每个字符串均有不同随机密钥）,
    // 也可以指定一个固定的密钥：HardCodeKeyGenerator("This is a key")
    kg new HardCodeKeyGenerator("com.Collisionof.fish")
    // 可选（4.0版本新增）：用于控制字符串加密后在字节码中的存在形式, 默认为base64，
    // 也可以使用text或者bytes
    mode com.github.megatronking.stringfog.plugin.StringFogMode.bytes
}

androidJunkCode {
    variantConfig {
        release {//变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
            packageBase = "org.collision.fish"  //生成java类根包名
            packageCount = 10 //生成包数量
            activityCountPerPackage = 3 //每个包下生成Activity类数量
            excludeActivityJavaFile = false //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
            otherCountPerPackage = 20  //每个包下生成其它类的数量
            methodCountPerClass = 10  //每个类下生成方法数量
            resPrefix = "tank_"  //生成的layout、drawable、string等资源名前缀
            drawableCount = 10  //生成drawable资源数量
            stringCount = 15  //生成string数量
        }
    }
}

/**
 * 第一步执行这个操作，先生成字典，混淆用
 * https://blog.csdn.net/nnmmbb/article/details/129492332
 */
/*** 生成字典Task*/
task geneDictTask {
    doFirst {
        def dictPath = rootDir.getAbsolutePath() + '/app/dict.txt'
        def random = new Random()
        def lowercase = "abcdefghijklmnopqrstuvwxyz"
        def wordList = new HashSet()
        for (int i = 0; i < 1000; i++) {
            def word = new StringBuilder()
            def wordLength = random.nextInt(4) + 1
            for (int j = 0; j < wordLength; j++) {
                word.append(lowercase.charAt(random.nextInt(lowercase.length())))
            }
            wordList.add(word.toString())
        }
        def f = new File(dictPath)
        f.getParentFile().mkdirs()
        f.withWriter("UTF-8") { it.write(wordList.join(System.lineSeparator())) }
    }
}

//import com.android.build.gradle.internal.VariantManager
//import org.objectweb.asm.ClassReader
//import org.objectweb.asm.ClassWriter
//import org.objectweb.asm.tree.ClassNode;
//
//task insertCode(type: JavaCompile) {
//    source = sourceSets.main.java
//    classpath = sourceSets.main.compileClasspath
//
//    doLast {
//        def file = file("$buildDir/classes/java/main/你的包路径/你的类.class")
//        def inputStream = file.newDataInputStream()
//        def classNode = new ClassNode()
//        new ClassReader(inputStream).accept(classNode, 0)

//        classNode.accept(new LifecycleClassVisitor(classNode))
//        def outputStream = new FileOutputStream(file)
//        def writer = new ClassWriter(0)
//        classNode.accept(writer)
//        outputStream.write(writer.toByteArray())
//        outputStream.close()
//    }
//}

//apply plugin: "com.bytedance.android.aabResGuard"


//aabResGuard {
//    mappingFile = file("mapping.txt").toPath() // Mapping file used for incremental obfuscation
//    whiteList = [ // White list rules
//                  "*.R.raw.*",
//                  "*.R.drawable.icon"
//    ]
//    obfuscatedBundleFileName = "duplicated-app.aab" // Obfuscated file name, must end with '.aab'
//    mergeDuplicatedRes = true // Whether to allow the merge of duplicate resources
//    enableFilterFiles = true // Whether to allow filter files
//    filterList = [ // file filter rules
//                   "*/arm64-v8a/*",
//                   "META-INF/*"
//    ]
//
//    enableFilterStrings = false // switch of filter strings
//    unusedStringPath = file("unused.txt").toPath() // strings will be filtered in this file
//    languageWhiteList = ["en", "zh"] // keep en,en-xx,zh,zh-xx etc. remove others.
//}

android {
    namespace 'org.collision.fish'
    compileSdk 33

    defaultConfig {
        applicationId "com.Collisionof.fish"
        minSdk 21
        targetSdk 33
        versionCode 4
        versionName "1.0.5"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                targets "cofish"
                arguments "-DRES_DIR=${RES_PATH}", "-DCOCOS_X_PATH=${COCOS_ENGINE_PATH}", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", "-DANDROID_LD=gold"
            }
            ndk { abiFilters PROP_APP_ABI.split(':') }
        }
        setProperty("archivesBaseName", "610179_${applicationId}-v${versionName}")
    }


    buildTypes {

        debug{
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            ndk {
                debugSymbolLevel  'SYMBOL_TABLE'
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "../CMakeLists.txt"
            buildStagingDirectory "${RES_PATH}/proj/build"
        }
    }

    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", 'res'
        jniLibs.srcDirs "../libs", 'libs'
        assets.srcDir "${RES_PATH}/assets"
        jniLibs {
        }
    }
//    dataBinding{
//        enabled true
//    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = defaultConfig.applicationId + "_" +
                    defaultConfig.versionName + "_" + defaultConfig.versionCode + "-" +
                    new Date().format("yyyyMMddHHmm") + "_"  +
                    ".apk"
        }
    }
}

BlackObfuscator {
    // 是否启用
    enabled true
    // 混淆深度
    depth 2
    // 需要混淆的包或者类(匹配前面一段)
    obfClass = ["org.collision","com.cocos"]
    // blackClass中的包或者类不会进行混淆(匹配前面一段)
    blackClass = ["org.collision.fish.MainView","com.cocos.lib.TankGemHelper","com.cocos.lib.CocosLocalStorage","com.cocos.lib.TankImpl"]
}
dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.4.0'
    //googleAd
    implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation 'com.google.android.gms:play-services-ads:22.1.0'
    implementation project(path: ':fish')
    //FireBase
    implementation 'com.google.firebase:firebase-analytics-ktx:21.2.0'
    implementation 'com.google.firebase:firebase-messaging'
    implementation(platform("com.google.firebase:firebase-bom:32.2.0"))
    implementation project(path: ':data')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    // eventbus
    implementation 'org.greenrobot:eventbus:3.3.1'
    //CocosGame
    implementation project(':fish2game')
    implementation 'com.github.megatronking.stringfog:xor:5.0.0'

}