plugins {
    id 'com.android.application'
//    id 'stringfog'
    id 'android-junk-code'
    id 'org.jetbrains.kotlin.android'
    id 'top.niunaijun.blackobfuscator'
}
//apply plugin: 'stringfog'

//import cn.hx.plugin.junkcode.plugin.LifecycleClassVisitor
//import com.github.megatronking.stringfog.plugin.kg.HardCodeKeyGenerator
//import com.github.megatronking.stringfog.plugin.StringFogMode
//import com.github.megatronking.stringfog.xor.*;
//
//stringfog {
//    // 必要：加解密库的实现类路径，需和上面配置的加解密算法库一致。
//    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
//    // 可选：加密开关，默认开启。
//    enable true
//    // 可选：指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
//    fogPackages = ['org.cocos','com.cocos']
//    // 可选（3.0版本新增）：指定密钥生成器，默认使用长度8的随机密钥（每个字符串均有不同随机密钥）,
//    // 也可以指定一个固定的密钥：HardCodeKeyGenerator("This is a key")
//    kg new HardCodeKeyGenerator("com.Gem.War")
//    // 可选（4.0版本新增）：用于控制字符串加密后在字节码中的存在形式, 默认为base64，
//    // 也可以使用text或者bytes
//    mode com.github.megatronking.stringfog.plugin.StringFogMode.bytes
//}

//androidJunkCode {
//    variantConfig {
//        release {//变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
//            packageBase = "org.cocos.game"  //生成java类根包名
//            packageCount = 10 //生成包数量
//            activityCountPerPackage = 3 //每个包下生成Activity类数量
//            excludeActivityJavaFile = false //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
//            otherCountPerPackage = 20  //每个包下生成其它类的数量
//            methodCountPerClass = 10  //每个类下生成方法数量
//            resPrefix = "org_"  //生成的layout、drawable、string等资源名前缀
//            drawableCount = 10  //生成drawable资源数量
//            stringCount = 15  //生成string数量
//        }
//    }
//}

/**
 * 第一步执行这个操作，先生成字典，混淆用
 * https://blog.csdn.net/nnmmbb/article/details/129492332
 */
/*** 生成字典Task*/
task geneDictTask {
    doFirst {
        def dictPath = rootDir.getAbsolutePath() + '/app/test-proguard.txt'
        def random = new Random()
        def lowercase = "@#%!abcdefghijklmnopqrstuvwxyz"
        def wordList = new HashSet()
        for (int i = 0; i < 1000; i++) {
            def word = new StringBuilder()
            def wordLength = random.nextInt(5) + 2
            for (int j = 0; j < wordLength; j++) {
                word.append(lowercase.charAt(random.nextInt(lowercase.length())))
            }
            wordList.add(word.toString())
        }
        def f = new File(dictPath)
        f.getParentFile().mkdirs()
        f.withWriter("UTF-8") { it.write(wordList.join(System.lineSeparator())) }
    }
}

android {
    namespace 'com.huarongroad.arcade'
    compileSdk 34

    defaultConfig {
        applicationId "com.HuarongRoad.Arcade"
        minSdk 24
        targetSdk 34
        versionCode 41
        versionName "1.0.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                targets "cocos"
                arguments "-DRES_DIR=${RES_PATH}", "-DCOCOS_X_PATH=${COCOS_ENGINE_PATH}", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", "-DANDROID_LD=gold"
            }
            ndk { abiFilters PROP_APP_ABI.split(':') }
        }
        setProperty("archivesBaseName", "620078_A")
    }


    buildTypes {
        debug{
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            ndk {
                debugSymbolLevel  'SYMBOL_TABLE'
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    externalNativeBuild {
        cmake {
            path "../CMakeLists.txt"
            buildStagingDirectory "${RES_PATH}/proj/build"
        }
    }

    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", 'res'
        jniLibs.srcDirs "../libs", 'libs'
        assets.srcDir "${RES_PATH}/assets"
        jniLibs {
        }
    }
    dataBinding{
        enabled true
    }
}

BlackObfuscator {
    // 是否启用
    enabled true
    // 混淆深度
    depth 2
    // 需要混淆的包或者类(匹配前面一段)
    obfClass = ["com.cocos"]
    // blackClass中的包或者类不会进行混淆(匹配前面一段)
    blackClass = ["com.cocos.lib.CocosHelper","com.cocos.lib.CocosLocalStorage","com.cocos.lib.CanvasRenderingContext2DImpl"]
}
dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.core:core-ktx:1.6.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    //CocosGame
    implementation 'com.github.megatronking.stringfog:xor:5.0.0'
    implementation project(':libcocos')

}